{"version":3,"sources":["containers/CountriesContainer/CounriesArea/index.ts","containers/CountriesContainer/CountriesContainer.tsx"],"names":["CountriesArea","lazy","connect","countries","isLoading","dispatch","onLoadCountries","region","loadCountries","regionName","useParams","useEffect","Spinner"],"mappings":"gKAOeA,EAJOC,gBAAK,WACzB,OAAO,uD,gBC+CMC,uBAbS,SAAC,GACvB,MAAO,CACLC,UAF8D,EAAvCA,UAGvBC,UAH8D,EAA5BA,cAOX,SAACC,GAC1B,MAAO,CACLC,gBAAiB,SAACC,GAAD,OAAoBF,EAASG,YAAcD,QAIjDL,EA3Bf,YAA6E,IAAhDI,EAA+C,EAA/CA,gBAAiBH,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,UAC/CK,EAAeC,cAAfD,WAUR,OATAE,qBAAU,WACRL,EAAgBG,KACf,CAACH,EAAiBG,IAELL,EACd,kBAACQ,EAAA,EAAD,MAEA,kBAAC,EAAD,CAAeT,UAAWA,EAAWM,WAAYA","file":"static/js/7.6fce3e98.chunk.js","sourcesContent":["// Vendor imports\r\nimport { lazy } from \"react\";\r\n\r\nconst CountriesArea = lazy(() => {\r\n  return import(\"./CountriesArea\");\r\n});\r\n\r\nexport default CountriesArea;\r\n","// Vendor imports\r\nimport React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useParams } from \"react-router\";\r\n// Imports\r\nimport CountriesArea from \"./CounriesArea\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport { loadCountries } from \"../../store/actions\";\r\n// Type imports\r\nimport { Dispatch } from \"redux\";\r\nimport { Country, StoreState } from \"../../types\";\r\n\r\n\r\ntype StateToProps = {\r\n  countries: Country[];\r\n  isLoading: boolean;\r\n};\r\n\r\ntype DispatchToProps = {\r\n  onLoadCountries: (region: string) => void;\r\n};\r\n\r\ntype Props = StateToProps & DispatchToProps;\r\n\r\nfunction CountriesContainer({onLoadCountries, countries, isLoading}: Props) {\r\n  const { regionName } = useParams();\r\n  useEffect(() => {\r\n    onLoadCountries(regionName);\r\n  }, [onLoadCountries, regionName]);\r\n\r\n  const content = isLoading ? (\r\n    <Spinner />\r\n  ) : (\r\n    <CountriesArea countries={countries} regionName={regionName}/>\r\n  );\r\n  return content;\r\n}\r\n\r\nconst mapStateToProps = ({ countries, isLoading }: StoreState) => {\r\n  return {\r\n    countries,\r\n    isLoading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n  return {\r\n    onLoadCountries: (region: string) => dispatch(loadCountries(region)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountriesContainer);\r\n"],"sourceRoot":""}
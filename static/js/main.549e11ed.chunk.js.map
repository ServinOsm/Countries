{"version":3,"sources":["store/actions/regionsActions.ts","store/actions/countriesActions.ts","store/actions/countryAction.ts","store/actions/loadingActions.ts","components/Spinner/Spinner.module.scss","components/Spinner/Spinner.tsx","App.module.scss","store/actions/actionTypes.ts","containers/RegionsContainer/index.ts","containers/CountriesContainer/index.ts","containers/CountryContainer/index.ts","App.tsx","store/reducers/regionsReducer.ts","store/reducers/countriesReducer.ts","store/reducers/countryReducer.ts","store/reducers/loadingReducer.ts","store/reducers/index.ts","store/sagas/regionsSaga.ts","store/sagas/countriesSaga.ts","store/sagas/countrySaga.ts","store/sagas/index.ts","store/index.ts","index.tsx"],"names":["loadRegions","type","LOAD_REGIONS","setRegions","regions","SET_REGIONS","loadCountries","region","LOAD_COUNTRIES","setCountries","countries","SET_COUNTRIES","loadCountry","countryName","LOAD_COUNTRY","setCountry","country","SET_COUNTRY","startFetching","START_FETCHING","stopFetching","STOP_FETCHING","module","exports","spinner","className","styles","loadingspinner","RegionsContainer","lazy","CountriesArea","CountryContainer","App","app","fallback","Spinner","path","render","CountriesContainer","to","regionsReducer","state","action","countriesReducer","initialState","name","topLevelDomain","alpha2Code","alpha3Code","callingCodes","capital","altSpellings","subregion","population","latlng","demonym","area","gini","timezones","borders","nativeName","numericCode","currencies","languages","translations","flag","regionalBlocs","cioc","loadingReducer","rootReducer","combineReducers","countryReducer","isLoading","requestAllCountriesData","watchRegionsSaga","put","axios","get","data","set","Set","forEach","add","Array","from","alert","all","takeLatest","requestCountries","watchCountriesSaga","requestCountry","watchCountrySaga","rootSaga","fork","regionsSaga","countriesSaga","countrySaga","defaults","baseURL","configureStore","saga","createSagaMiddleware","composedMiddleware","composeWithDevTools","applyMiddleware","store","createStore","run","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.549e11ed.chunk.js","sourcesContent":["// Imports\r\nimport { LOAD_REGIONS, SET_REGIONS} from \"./actionTypes\";\r\n\r\nexport const loadRegions = () => {\r\n  return {\r\n    type: LOAD_REGIONS,\r\n  };\r\n};\r\n\r\nexport const setRegions = (regions: string[]) => {\r\n  return {\r\n    type: SET_REGIONS,\r\n    regions,\r\n  };\r\n};\r\n","// Imports\r\nimport { LOAD_COUNTRIES, SET_COUNTRIES } from \"./actionTypes\";\r\n// Type imports\r\nimport { Country } from \"../../types\";\r\n\r\nexport const loadCountries = (region: string) => {\r\n  return {\r\n    type: LOAD_COUNTRIES,\r\n    region\r\n  };\r\n};\r\n\r\nexport const setCountries = (countries: Country[]) => {\r\n  return {\r\n    type: SET_COUNTRIES,\r\n    countries,\r\n  };\r\n};\r\n","// Imports\r\nimport { LOAD_COUNTRY, SET_COUNTRY } from \"./actionTypes\";\r\n// Type imports\r\nimport { Country } from \"../../types\";\r\n\r\nexport const loadCountry = (countryName: string) => {\r\n  return {\r\n    type: LOAD_COUNTRY,\r\n    countryName\r\n  };\r\n};\r\n\r\nexport const setCountry = (country: Country) => {\r\n  return {\r\n    type: SET_COUNTRY,\r\n    country,\r\n  };\r\n};\r\n","// Imports\r\nimport { START_FETCHING, STOP_FETCHING } from \"./actionTypes\";\r\n\r\nexport const startFetching = () => {\r\n  return {\r\n    type: START_FETCHING,\r\n  };\r\n};\r\n\r\nexport const stopFetching = () => {\r\n  return {\r\n    type: STOP_FETCHING,\r\n  };\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"Spinner_spinner__3G6fX\",\"loadingspinner\":\"Spinner_loadingspinner__2l35c\",\"loadingspin\":\"Spinner_loadingspin__3FaDE\"};","// Vendor imports\r\nimport React from \"react\";\r\n// Style imports\r\nimport styles from \"./Spinner.module.scss\";\r\n\r\nconst spinner = () => (\r\n  <div className={styles.spinner}>\r\n    <div className={styles.loadingspinner}></div>\r\n  </div>\r\n);\r\n\r\nexport default spinner;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__QRyvf\"};","export const LOAD_REGIONS = \"LOAD_REGIONS\";\r\nexport const SET_REGIONS = \"SET_REGIONS\";\r\nexport const LOAD_COUNTRIES = \"LOAD_COUNTRIES\";\r\nexport const SET_COUNTRIES = \"SET_COUNTRIES\";\r\nexport const LOAD_COUNTRY = \"LOAD_COUNTRY\";\r\nexport const SET_COUNTRY = \"SET_COUNTRY\";\r\nexport const START_FETCHING = \"START_FETCHING\";\r\nexport const STOP_FETCHING = \"STOP_FETCHING\";\r\n","// Vendor imports\r\nimport { lazy } from \"react\";\r\n\r\nconst RegionsContainer = lazy(() => {\r\n  return import(\"./RegionsContainer\");\r\n});\r\n\r\nexport default RegionsContainer;\r\n","// Vendor imports\r\nimport { lazy } from \"react\";\r\n\r\nconst CountriesArea = lazy(() => {\r\n  return import(\"./CountriesContainer\");\r\n});\r\n\r\nexport default CountriesArea;\r\n","// Vendor imports\r\nimport { lazy } from \"react\";\r\n\r\nconst CountryContainer = lazy(() => {\r\n  return import(\"./CountryContainer\");\r\n});\r\n\r\nexport default CountryContainer;\r\n","// Vendor imports\nimport React, { Suspense } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n// Imports\nimport RegionsContainer from \"./containers/RegionsContainer\";\nimport CountriesContainer from \"./containers/CountriesContainer\";\nimport CountryContainer from \"./containers/CountryContainer\";\nimport Spinner from \"./components/Spinner/Spinner\";\n// Style imports\nimport styles from \"./App.module.scss\";\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <Suspense fallback={<Spinner />}>\n        <Switch>\n          <Route\n            path=\"/regions/:regionName/:countryName\"\n            render={() => <CountryContainer />}\n          />\n          <Route\n            path=\"/regions/:regionName/\"\n            render={() => <CountriesContainer />}\n          />\n          <Route path=\"/regions\" render={() => <RegionsContainer />} />\n          <Redirect to=\"/regions\" />\n        </Switch>\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","// Imports\r\nimport { SET_REGIONS } from \"../actions/actionTypes\";\r\n// Type imports\r\nimport { SetRegions } from \"../../types\";\r\n\r\nconst regionsReducer = (state: string[] = [], action: SetRegions) => {\r\n  switch (action.type) {\r\n    case SET_REGIONS:\r\n      return [...action.regions];\r\n    default:\r\n      return [...state];\r\n  }\r\n};\r\n\r\nexport default regionsReducer;\r\n","// Imports\r\nimport { SET_COUNTRIES } from \"../actions/actionTypes\";\r\n// Type imports\r\nimport { Country, SetCountries } from \"../../types\";\r\n\r\nconst countriesReducer = (state: Country[] = [], action: SetCountries) => {\r\n  switch (action.type) {\r\n    case SET_COUNTRIES:\r\n      return [...action.countries];\r\n    default:\r\n      return [...state];\r\n  }\r\n};\r\n\r\nexport default countriesReducer;\r\n","// Imports\r\nimport { SET_COUNTRY } from \"../actions/actionTypes\";\r\n// Type imports\r\nimport { Country, SetCountry } from \"../../types\";\r\n\r\nlet initialState: Country = {\r\n  name: \"\",\r\n  topLevelDomain: [],\r\n  alpha2Code: \"\",\r\n  alpha3Code: \"\",\r\n  callingCodes: [],\r\n  capital: \"\",\r\n  altSpellings: [],\r\n  region: \"\",\r\n  subregion: \"\",\r\n  population: 0,\r\n  latlng: [],\r\n  demonym: \"\",\r\n  area: 0,\r\n  gini: 0,\r\n  timezones: [],\r\n  borders: [],\r\n  nativeName: \"\",\r\n  numericCode: \"\",\r\n  currencies: [],\r\n  languages: [],\r\n  translations: {},\r\n  flag: \"\",\r\n  regionalBlocs: [],\r\n  cioc: \"\",\r\n}\r\n\r\nconst countriesReducer = (state = initialState, action: SetCountry) => {\r\n  switch (action.type) {\r\n    case SET_COUNTRY:\r\n      return {...action.country};\r\n    default:\r\n      return {...state};\r\n  }\r\n};\r\n\r\nexport default countriesReducer;\r\n","// Imports\r\nimport { START_FETCHING, STOP_FETCHING } from \"../actions/actionTypes\";\r\n\r\nconst loadingReducer = (state: boolean = true, action: { type: string }) => {\r\n  switch (action.type) {\r\n    case START_FETCHING:\r\n      return true;\r\n    case STOP_FETCHING:\r\n      return false;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default loadingReducer;\r\n","// Vendor imports\r\nimport { combineReducers } from \"redux\";\r\n// Imports\r\nimport regionsReducer from \"./regionsReducer\"\r\nimport countriesReducer from \"./countriesReducer\";\r\nimport countryReducer from \"./countryReducer\";\r\nimport loadingReducer from \"./loadingReducer\";\r\n// Type imports\r\nimport { StoreState } from \"../../types\";\r\n\r\nexport const rootReducer = combineReducers<StoreState>({\r\n  regions: regionsReducer,\r\n  countries: countriesReducer,\r\n  country: countryReducer,\r\n  isLoading: loadingReducer,\r\n})","// Vendor imports\r\nimport { takeLatest, put, all } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n// Imports\r\nimport { LOAD_REGIONS } from \"../actions/actionTypes\";\r\nimport { setRegions, startFetching, stopFetching } from \"../actions\";\r\n// Type imports\r\nimport { Country } from \"../../types\"\r\n\r\nfunction* requestAllCountriesData() {\r\n  try {\r\n    yield put(startFetching());\r\n    const { data }: { data: Country[] } = yield axios.get(\"/all\");\r\n    const set: Set<string> = new Set();\r\n    data.forEach((country) => {\r\n      if (country.region) {\r\n        set.add(country.region);\r\n      }\r\n    });\r\n    const regions: string[] = Array.from(set);\r\n    yield put(setRegions(regions));\r\n    yield put(stopFetching());\r\n  } catch {\r\n    alert(\"THE REQUEST HAS FAILED AND THIS IS ERROR HANDLER\");\r\n    yield put(stopFetching());\r\n  }\r\n}\r\n\r\nexport default function* watchRegionsSaga() {\r\n  yield all([takeLatest(LOAD_REGIONS, requestAllCountriesData)]);\r\n}\r\n","// Vendor imports\r\nimport { takeLatest, put, all } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n// Imports\r\nimport { LOAD_COUNTRIES } from \"../actions/actionTypes\";\r\nimport { setCountries, startFetching, stopFetching } from \"../actions\";\r\n// Type imports\r\nimport { LoadCountries, Country } from \"../../types\";\r\n\r\n\r\nfunction* requestCountries({ region }: LoadCountries) {\r\n  try {\r\n    yield put(startFetching());\r\n    const { data }: { data: Country[] } = yield axios.get(`/region/${region}`);\r\n    yield put(setCountries(data));\r\n    yield put(stopFetching());\r\n  } catch {\r\n    alert(\"THE REQUEST HAS FAILED AND THIS IS ERROR HANDLER\");\r\n    yield put(stopFetching());\r\n  }\r\n}\r\n\r\nexport default function* watchCountriesSaga() {\r\n  yield all([takeLatest(LOAD_COUNTRIES, requestCountries)]);\r\n}","// Vendor imports\r\nimport { takeLatest, put, all } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n// Imports\r\nimport { LOAD_COUNTRY } from \"../actions/actionTypes\";\r\nimport { setCountry, startFetching, stopFetching } from \"../actions\";\r\n// Type imports\r\nimport { LoadCountry, Country } from \"../../types\";\r\n\r\n\r\nfunction* requestCountry({ countryName }: LoadCountry) {\r\n  try {\r\n    yield put(startFetching());\r\n    const { data: [country] }: { data: Country[] } = yield axios.get(`/name/${countryName}`);\r\n    yield put(setCountry(country));\r\n    yield put(stopFetching());\r\n  } catch {\r\n    alert(\"THE REQUEST HAS FAILED AND THIS IS ERROR HANDLER\");\r\n    yield put(stopFetching());\r\n  }\r\n}\r\n\r\nexport default function* watchCountrySaga() {\r\n  yield all([takeLatest(LOAD_COUNTRY, requestCountry)]);\r\n}","// Vendor imports\r\nimport { all, fork } from \"redux-saga/effects\";\r\n// Imports\r\nimport regionsSaga from \"./regionsSaga\";\r\nimport countriesSaga from \"./countriesSaga\";\r\nimport countrySaga from \"./countrySaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([fork(regionsSaga), fork(countriesSaga), fork(countrySaga)]);\r\n}\r\n","// Vendor imports\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport axios from \"axios\";\r\n// Imports\r\nimport { rootReducer } from \"./reducers\";\r\nimport rootSaga from \"./sagas\";\r\n\r\nfunction configureStore() {\r\n  const saga = createSagaMiddleware();\r\n  const composedMiddleware = composeWithDevTools(\r\n    applyMiddleware(saga)\r\n  );\r\n  const store = createStore(rootReducer, composedMiddleware);\r\n  saga.run(rootSaga);\r\n\r\n  return store;\r\n}\r\n\r\naxios.defaults.baseURL = \"https://restcountries.eu/rest/v2\";\r\n\r\nexport default configureStore;\r\n","// Vendor imports\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from 'react-router-dom';\n// Imports\nimport App from \"./App\";\nimport configureStore from \"./store\";\n// Style imports\nimport \"./index.scss\";\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
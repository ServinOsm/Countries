{"version":3,"sources":["containers/CountryContainer/CountryArea/index.ts","containers/CountryContainer/CountryContainer.tsx"],"names":["CountryArea","lazy","connect","country","isLoading","dispatch","onLoadCountry","countryName","loadCountry","name","nativeName","population","region","subregion","capital","languages","currencies","borders","regionalBlocs","altSpellings","callingCodes","timezones","flag","useParams","regionName","useEffect","Spinner","mainInfo","Population","Region","Capital","Subregion","secondaryInfo","Languages","Currencies","additionalInfo","Spellings","Borders"],"mappings":"gKAOeA,EAJKC,gBAAK,WACvB,OAAO,iC,gBC0FMC,uBAbS,SAAC,GACvB,MAAO,CACLC,QAF4D,EAArCA,QAGvBC,UAH4D,EAA5BA,cAOT,SAACC,GAC1B,MAAO,CACLC,cAAe,SAACC,GAAD,OAAyBF,EAASG,YAAYD,QAIlDL,EAtEf,YAmBW,IAAD,IAlBRC,QACEM,EAiBM,EAjBNA,KACAC,EAgBM,EAhBNA,WACAC,EAeM,EAfNA,WACAC,EAcM,EAdNA,OACAC,EAaM,EAbNA,UACAC,EAYM,EAZNA,QACAC,EAWM,EAXNA,UACAC,EAUM,EAVNA,WACAC,EASM,EATNA,QACAC,EAQM,EARNA,cACAC,EAOM,EAPNA,aACAC,EAMM,EANNA,aACAC,EAKM,EALNA,UACAC,EAIM,EAJNA,KAEFlB,EAEQ,EAFRA,UACAE,EACQ,EADRA,cACQ,EAE4BiB,cAA5BhB,EAFA,EAEAA,YAAaiB,EAFb,EAEaA,WAiCrB,OAhCAC,qBAAU,WACRnB,EAAcC,KACb,CAACA,EAAaD,IAEDF,EACd,kBAACsB,EAAA,EAAD,MAEA,kBAAC,EAAD,CACEjB,KAAMA,EACNa,KAAMA,EACNE,WAAYA,EACZG,SAAU,CACR,cAAejB,EACfkB,WAAYjB,EACZkB,OAAQjB,EACRkB,QAAShB,EACTiB,UAAWlB,GAEbmB,cAAe,CACbC,UAAWlB,EACXmB,WAAYlB,EACZ,kBAAmBE,GAErBiB,eAAgB,CACdC,UAAWjB,EACXkB,QAASpB,EACT,gBAAiBG,EACjB,aAAcC","file":"static/js/8.4f8ce888.chunk.js","sourcesContent":["// Vendor imports\r\nimport { lazy } from \"react\";\r\n\r\nconst CountryArea = lazy(() => {\r\n  return import(\"./CountryArea\");\r\n});\r\n\r\nexport default CountryArea;\r\n","\r\n// Vendor imports\r\nimport React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { useParams } from \"react-router\";\r\n// Imports\r\nimport CountryArea from \"./CountryArea\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport { loadCountry } from \"../../store/actions\";\r\n// Type imports\r\nimport { Country, StoreState } from \"../../types\";\r\n\r\ntype StateToProps = {\r\n  country: Country;\r\n  isLoading: boolean;\r\n};\r\n\r\ntype DispatchToProps = {\r\n  onLoadCountry: (countryName: string) => void;\r\n};\r\n\r\ntype Props = StateToProps & DispatchToProps;\r\n\r\nfunction CountryContainer({\r\n  country: {\r\n    name,\r\n    nativeName,\r\n    population,\r\n    region,\r\n    subregion,\r\n    capital,\r\n    languages,\r\n    currencies,\r\n    borders,\r\n    regionalBlocs,\r\n    altSpellings,\r\n    callingCodes,\r\n    timezones,\r\n    flag,\r\n  },\r\n  isLoading,\r\n  onLoadCountry,\r\n}: Props) {\r\n\r\n  const { countryName, regionName } = useParams();\r\n  useEffect(() => {\r\n    onLoadCountry(countryName);\r\n  }, [countryName, onLoadCountry]);\r\n\r\n  const content = isLoading ? (\r\n    <Spinner />\r\n  ) : (\r\n    <CountryArea\r\n      name={name}\r\n      flag={flag}\r\n      regionName={regionName}\r\n      mainInfo={{\r\n        \"Native Name\": nativeName,\r\n        Population: population,\r\n        Region: region,\r\n        Capital: capital,\r\n        Subregion: subregion,\r\n      }}\r\n      secondaryInfo={{\r\n        Languages: languages,\r\n        Currencies: currencies,\r\n        \"Regional Blocks\": regionalBlocs,\r\n      }}\r\n      additionalInfo={{\r\n        Spellings: altSpellings,\r\n        Borders: borders,\r\n        \"Calling Codes\": callingCodes,\r\n        \"Time Zones\": timezones,\r\n      }}\r\n    />\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\nconst mapStateToProps = ({ country, isLoading }: StoreState) => {\r\n  return {\r\n    country,\r\n    isLoading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n  return {\r\n    onLoadCountry: (countryName: string) => dispatch(loadCountry(countryName)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CountryContainer);\r\n"],"sourceRoot":""}